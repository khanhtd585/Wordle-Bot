import math
from collections import Counter

# --- B∆∞·ªõc 0: Chu·∫©n b·ªã "Nguy√™n li·ªáu" ---
# ·ªû ƒë√¢y t√¥i ch·ªâ d√πng m·ªôt danh s√°ch nh·ªè ƒë·ªÉ code ch·∫°y nhanh
# Trong th·ª±c t·∫ø, b·∫°n c·∫ßn t·∫£i file ch·ª©a h√†ng ngh√¨n t·ª´
DANH_SACH_DAP_AN = []
DANH_SACH_TU_HOP_LE =[]

# ƒê·ªãnh nghƒ©a c√°c k√Ω t·ª± m√†u ƒë·ªÉ d·ªÖ ƒë·ªçc
XANH_LA = 'üü©'
VANG = 'üü®'
XAM = '‚¨õ'

ANSWER = 'ABACK'.upper()

def load_word_list(file_path: str) -> list[str]:
    with open(file_path, 'r') as f:
        words = [w.upper() for w in f.read().split(',')]
    return words

def check_guess_fake(guess: str, answer: str) -> list[dict]:
    res = []
    for i, c in enumerate(guess):
        ms = XAM
        if c == answer[i]:
            ms = XANH_LA
        elif c in answer:
            ms = VANG
        res.append(ms)
    return ''.join(res)

# --- B∆∞·ªõc 1: T·∫°o "C·ªó m√°y Ph·∫£n h·ªìi" ---
def kiem_tra_mau(tu_doan: str, tu_dap_an: str) -> str:
    """
    So s√°nh m·ªôt t·ª´ ƒëo√°n v·ªõi m·ªôt t·ª´ ƒë√°p √°n ƒë·ªÉ t·∫°o ra chu·ªói m√†u s·∫Øc.
    V√≠ d·ª•: kiem_tra_mau("crane", "cigar") -> "üü©‚¨õüü®‚¨õ‚¨õ"
    """
    if len(tu_doan) != 5 or len(tu_dap_an) != 5:
        return "ƒê·ªô d√†i t·ª´ ph·∫£i l√† 5"

    ket_qua = [''] * 5
    dem_chu_cai_dap_an = Counter(tu_dap_an)

    # ∆Øu ti√™n 1: T√¨m c√°c ch·ªØ c√°i ƒë√∫ng v·ªã tr√≠ (XANH_LA)
    for i in range(5):
        if tu_doan[i] == tu_dap_an[i]:
            ket_qua[i] = XANH_LA
            dem_chu_cai_dap_an[tu_doan[i]] -= 1
    # ∆Øu ti√™n 2: T√¨m c√°c ch·ªØ c√°i sai v·ªã tr√≠ (VANG) ho·∫∑c kh√¥ng c√≥ (XAM)
    for i in range(5):
        if ket_qua[i] == '': # Ch·ªâ x√©t nh·ªØng ch·ªØ c√°i ch∆∞a ƒë∆∞·ª£c t√¥ m√†u xanh
            if tu_doan[i] in dem_chu_cai_dap_an and dem_chu_cai_dap_an[tu_doan[i]] > 0:
                ket_qua[i] = VANG
                dem_chu_cai_dap_an[tu_doan[i]] -= 1
            else:
                ket_qua[i] = XAM

    return "".join(ket_qua)


# --- B∆∞·ªõc 2: T·∫°o "M√°y ƒëo Th√¥ng tin" ---
def tinh_thong_tin_ky_vong(tu_doan: str, danh_sach_hien_tai: list[str]) -> float:
    """
    T√≠nh l∆∞·ª£ng th√¥ng tin k·ª≥ v·ªçng (t√≠nh b·∫±ng bit) m√† m·ªôt t·ª´ ƒëo√°n mang l·∫°i
    cho danh s√°ch c√°c ƒë√°p √°n hi·ªán t·∫°i.
    """
    tong_so_tu = len(danh_sach_hien_tai)
    if tong_so_tu == 0:
        return 0.0

    # Ph√¢n nh√≥m c√°c t·ª´ trong danh s√°ch hi·ªán t·∫°i d·ª±a tr√™n m·∫´u m√†u ch√∫ng t·∫°o ra
    phan_phoi_mau = Counter()
    for tu_dap_an_tiem_nang in danh_sach_hien_tai:
        mau = kiem_tra_mau(tu_doan, tu_dap_an_tiem_nang)
        phan_phoi_mau[mau] += 1

    # T√≠nh th√¥ng tin k·ª≥ v·ªçng d·ª±a tr√™n c√¥ng th·ª©c entropy
    thong_tin_ky_vong = 0.0
    for so_luong in phan_phoi_mau.values():
        xac_suat = so_luong / tong_so_tu
        # L∆∞·ª£ng th√¥ng tin c·ªßa m·ªôt k·∫øt qu·∫£ l√† log2(1/p) = -log2(p)
        # Th√¥ng tin k·ª≥ v·ªçng l√† t·ªïng c·ªßa (x√°c su·∫•t * l∆∞·ª£ng th√¥ng tin)
        thong_tin_ky_vong += xac_suat * (-math.log2(xac_suat))

    return thong_tin_ky_vong


# --- B∆∞·ªõc 3: T·∫°o "B·ªô l·ªçc" ---
def loc_danh_sach(danh_sach_cu: list[str], tu_da_doan: str, mau_nhan_duoc: str) -> list[str]:
    """
    L·ªçc danh s√°ch c≈©, ch·ªâ gi·ªØ l·∫°i nh·ªØng t·ª´ t∆∞∆°ng th√≠ch v·ªõi m·∫´u m√†u ƒë√£ nh·∫≠n.
    """
    danh_sach_moi = []
    for tu in danh_sach_cu:
        if kiem_tra_mau(tu_da_doan, tu) == mau_nhan_duoc:
            danh_sach_moi.append(tu)
    return danh_sach_moi


# --- B∆∞·ªõc 4: V√≤ng l·∫∑p ch√≠nh c·ªßa Tr√≤ ch∆°i ---
def giai_wordle():
    """
    H√†m ch√≠nh ƒë·ªÉ ch·∫°y thu·∫≠t to√°n gi·∫£i Wordle.
    """
    danh_sach_hien_tai = DANH_SACH_DAP_AN
    
    # *** L∆ØU √ù QUAN TR·ªåNG ***
    # Vi·ªác t√≠nh to√°n t·ª´ ƒë·∫ßu ti√™n t·ªët nh·∫•t r·∫•t t·ªën th·ªùi gian.
    # Trong m·ªôt ch∆∞∆°ng tr√¨nh th·ª±c t·∫ø, ng∆∞·ªùi ta s·∫Ω t√≠nh tr∆∞·ªõc v√† l∆∞u l·∫°i k·∫øt qu·∫£
    # t·ª´ ƒë·∫ßu ti√™n t·ªët nh·∫•t ("RAISE", "SOARE", "CRANE", v.v.)
    # ·ªû ƒë√¢y, ch√∫ng ta s·∫Ω t√≠nh to√°n tr·ª±c ti·∫øp cho m·ªói l∆∞·ª£t.
    
    tu_tot_nhat = "AROSE"
    thong_tin_cao_nhat = -1.0

    for luot_doan in range(1, 7):
        print(f"\n--- L∆∞·ª£t ƒëo√°n {luot_doan} ---")
        print(f"S·ªë ƒë√°p √°n kh·∫£ thi c√≤n l·∫°i: {len(danh_sach_hien_tai)}")
        if len(danh_sach_hien_tai) <= 2:
            print(f"C√°c ƒë√°p √°n c√≥ th·ªÉ l√†: {danh_sach_hien_tai}")
        
        # b. ƒê∆∞a ra g·ª£i √Ω
        print(f"T·ª´ g·ª£i √Ω: '{tu_tot_nhat.upper()}' (ƒêi·ªÉm th√¥ng tin: {thong_tin_cao_nhat:.4f} bits)")
        
        # c. Nh·∫≠n ph·∫£n h·ªìi t·ª´ ng∆∞·ªùi d√πng
        mau_nhan_duoc = kiem_tra_mau(tu_tot_nhat, ANSWER)
        print(f"M·∫´u m√†u nh·∫≠n ƒë∆∞·ª£c: {mau_nhan_duoc}")

        # d. Ki·ªÉm tra chi·∫øn th·∫Øng
        if mau_nhan_duoc == XANH_LA * 5:
            print(f"\nCh√∫c m·ª´ng! B·∫°n ƒë√£ gi·∫£i ƒë∆∞·ª£c c√¢u ƒë·ªë sau {luot_doan} l·∫ßn ƒëo√°n!")
            return

        # e. L·ªçc danh s√°ch cho l∆∞·ª£t ti·∫øp theo
        danh_sach_hien_tai = loc_danh_sach(danh_sach_hien_tai, tu_tot_nhat, mau_nhan_duoc)
        
        if not danh_sach_hien_tai:
            print("L·ªói: Kh√¥ng c√≤n t·ª´ n√†o trong danh s√°ch. C√≥ th·ªÉ b·∫°n ƒë√£ nh·∫≠p sai m·∫´u m√†u ho·∫∑c t·ª´ kh√¥ng c√≥ trong danh s√°ch.")
            return
        
         # a. T√¨m t·ª´ ƒëo√°n t·ªët nh·∫•t
        tu_tot_nhat = ""
        thong_tin_cao_nhat = -1.0

        # Duy·ªát qua t·∫•t c·∫£ c√°c t·ª´ h·ª£p l·ªá ƒë·ªÉ t√¨m t·ª´ c√≥ th√¥ng tin k·ª≥ v·ªçng cao nh·∫•t
        for tu_doan_thu in danh_sach_hien_tai:
            diem_thong_tin = tinh_thong_tin_ky_vong(tu_doan_thu, danh_sach_hien_tai)
            if diem_thong_tin > thong_tin_cao_nhat:
                thong_tin_cao_nhat = diem_thong_tin
                tu_tot_nhat = tu_doan_thu

    print("R·∫•t ti·∫øc, ƒë√£ h·∫øt 6 l∆∞·ª£t ƒëo√°n.")

# Ch·∫°y ch∆∞∆°ng tr√¨nh
if __name__ == "__main__":
    DANH_SACH_DAP_AN = load_word_list('data.txt')
    DANH_SACH_TU_HOP_LE = DANH_SACH_DAP_AN.copy()
    giai_wordle()